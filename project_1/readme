Project 1 : ECEN 5013- Embedding Sensors and Actuators
Group Members: 1. Arundhathi Swami
	       2. Vignesh Jayaram

This project was utilised to achieve the following goals:
a. getting familiar with GNU make Build Systems
b. learning how to make softwares that are architecture-independent
c. cross compiling for three different platforms: Host (Linux- Ubuntu), BeagleBone Black, Freedom Freescale KL25Z

There were very specific requirements that needed to be adjered to in the build systems. These specifications are as below:

1. Flags used: 
-c =  create
-cc = compile
-I = includes folder named in the recipe to find required prerequisites 
-Wall = enables warning messages for compiles
-CFLAGS = enabls us to add a set of flags to every recipe
-O0 = indicates zero level of code optimization i.e disabling code optimizations
-std=c99 = compatible with c99 standard
-mcpu=cortexa8 = architecture specific flag for Beaglebone Black
-mcpu=cortexm0plus = architecture specific flag for Freedom Freescale Board

2. GNU make utilities used:
-size: this shows the size of the object file in hex, decimal 
-objdump: this outputs the object file after compilation
- ar: used to create an archive for various files i.e generating a static library


Target Specifications used were:

1. preprocess: used to create te preprocessor files for various source files
   extension = ".i"
   command: $make preprocess
   result: creates a file with the name specified in the recipe that contains preprocessor informatiion witha .i extension in your make   dircetory

2. asm-file:used to get the assembly files of specified source files 
   extension: ".S"
   command: $make asm-file
   result: creates assemby files for specific hosts witha .S extension in the makefile directory

3. %.o:used to generate object files from specified source files i.e compiling object files individually without linking them  
   extension: ".o"
   command: $make filename.o
   result: compiles source files and creates onject files with the filename.o in the makefile directory   	 

4. compile-all: used to compile all object files without linking
   note: there are extra targets specified for different architectures' compilation, namely:compile-all-BBB for the Beagle Bone and compile-all-FF for the Freedom Freescale board

5. build: used to compile and link all source files and generate an executable file and the memory map file
   extension: ".map"
   command: $make build
   result: generates executable file called project in the makefile directory which can be executed using ./project to get our output and also a map file which displays the memory mapping of the executable file
   note: two separate build targets namely build-BBB and build-FF have been generated to build files for respective architectures

6. upload: used to scp the project executable file to the beaglebone Black dev board
   command: $make upload
   result: After making a directory called "release" on the beaglebone board, we can copy our project executable file on the beagleboe board and execute it on the beaglebone black architecture by running ./project.

 			
7. clean: this target is used to clean the makefile directory of any and all files generated by make
   comand: $make clean
   results: deletes any files with extensions ranging from .o, .i, .S, .Map, .dep, .a and executable file project


8. build-lib: used to build a static library of any specified source files
   extension: ".a"
   command: $make build-lib
   results: makes a libproject1.a file in the makefile directory containing source files mentioned in the target prerequisites 


9. direct_link: used to invoke the linker directly and not through the gcc. 
   command: $make direct_link
   result: invokes the linker usiing ld without using gcc

10.dependencies: used to generate a file explicitly stating the dependencies of the source files 
   extension: ".dep"
   command: $make dependencies
   results: generates a filename.dep file in the makefile directory that states the file dependencies
   note: separate target for freedom freescale board dependencies-FF

11. object_size: used to output size of the executable project on the command line itslef
    command: $make object_size
    results: outputs the executable file size 

NOTE: a file named sources.mk has been included in the makefile which specifies the directories the make file must look into to find the source files mentioned in the targets. There is also a folder named sources that contains all the .c files / source files that is referenced by the vpath. Another folder called header includes all the .h files. This file is link refernced using the -I flag.

 

